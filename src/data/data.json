{
  "lessons": [
    {
      "id": "demo",
      "name": "Demo lesson",
      "description": "lesson to demonstrate application possibilities",
      "categories": [
        {
          "id": "demo",
          "name": "Demo",
          "topics": [
            {
              "id": "demo",
              "name": "demo",
              "theory": "Demo theory. It supports ```markdown```",
              "presentation": [],
              "sandbox": {
                "code": "\nconst one = 1;\nsandbox.assert('one equals 1', one === 1);\n\nconst e = sandbox.createElement('button');\n\ne.innerText = 'Test button';\n\ne.addEventListener('click', () => {\n  alert(e.innerText + ' click');\n});"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "test-lesson",
      "name": "Test Lesson",
      "description": "Ainanenane saldfh klshdbh laksjdhf lj",
      "categories": [
        {
          "id": "test-category",
          "name": "Test category",
          "topics": [
            {
              "id": "test-topic",
              "name": "Test Topic",
              "theory": "# Test Topic Theory \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown",
              "presentation": {
                "slides": [
                  {
                    "type": "text",
                    "content": "## Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown# Slide text \n\n* I\n* Am\n* A\n* Markdown Slide text \n\n* I\n* Am\n* A\n* Markdown"
                  },
                  {
                    "type": "image",
                    "content": "/favicon.ico"
                  },
                  {
                    "type": "text",
                    "content": "# One more slide text"
                  }
                ]
              },
              "sandbox": {
                "code": "var a = 'ainane';\nsandbox.assert('a equals ainane', a === 'ainane')"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "js-patterns",
      "name": "JS Patterns",
      "description": "lorem ipsum dolor sit amet jksgh sfkdgh las fd asefla kasdg  kasdfh vmas shd",
      "categories": [
        {
          "id": "creational",
          "name": "Creational",
          "topics": [
            {
              "id": "module",
              "name": "Module",
              "theory": "# Live demo\n\nChanges are automatically rendered as you type.\n\n* Follows the [CommonMark](http://commonmark.org/) spec\n* Renders actual, \"native\" React DOM elements\n* Allows you to escape or skip HTML (try toggling the checkboxes above)\n* If you escape or skip the HTML, no dangerouslySetInnerHTML is used! Yay!\n\n## HTML block below\n\n<blockquote>\n    This blockquote will change based on the HTML settings above.\n</blockquote>\n\n## How about some code?\n",
              "presentation": {
                "slides": []
              },
              "sandbox": {
                "code": "// JS goes here\nvar a = 11;\nconst b = (z = 1) => {\n  console.log(z);\n}"
              }
            }
          ]
        },
        {
          "id": "behavioral",
          "name": "Behavioral",
          "topics": [
            {
              "id": "mediator",
              "name": "Mediator",
              "theory": "al;dskfghs;dfjghsldfg; asdlfhg asldkjfhas ldjf",
              "presentation": {
                "slides": []
              },
              "sandbox": {
                "code": "// JS goes here\nvar a = 11;\nconst b = (z = 1) => {\n  console.log(z);\n}"
              }
            }
          ]
        },
        {
          "id": "structural",
          "name": "Structural",
          "topics": [
            {
              "id": "facade",
              "name": "Facade",
              "theory": "al;dskfghs;dfjghsldfg; asdlfhg asldkjfhas ldjf",
              "presentation": {
                "slides": []
              },
              "sandbox": {
                "code": "// JS goes here\nvar a = 11;\nconst b = (z = 1) => {\n  console.log(z);\n}"
              }
            }
          ]
        }
      ]
    }
  ]
}